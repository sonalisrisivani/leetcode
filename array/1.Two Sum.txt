https://leetcode.com/problems/two-sum/?envType=problem-list-v2&envId=array



O(n^2)- using two for loops
class Solution {
    public int[] twoSum(int[] nums, int target) {
        int res[]=new int[2];
        for(int i=0;i<nums.length;i++)
        {
            for(int j=i+1;j<nums.length;j++)
            {
                if(target-nums[i]==nums[j])
                {
                    res[0]=i;
                    res[1]=j;
                    return res;
                }
            }
        }
        return res;
    }
}




using hashmap
class Solution {
    public int[] twoSum(int[] nums, int target) {
        int res[]=new int[2];
        Map <Integer,Integer> mp= new HashMap<>();
        for(int i=0;i<nums.length;i++)
        {
            mp.add(nums[i],i);
        }
        for(int i=0;i<length;i++)
        {
            if(mp.containsKey(target-nums[i]) && mp.get(target-nums[i])!=i)
            {
                res[0]=i;
                res[1]= mp.get(target-nums[i]);
                return res; 
            }
        }
        return res;
    }
}






another approach:
sort the hashmap based on the keys, and use tow pointers approach
with logic:


low=0,high=nums.length-1;
while(low<=high)
{
 if(low==high) {return res;}
 else if(target-nums[low] ==nums[high]) {return ..}
 else if(nums[low] +nums[high] > target) {high--;}
 else if(nums[low] +nums[high] < target) {low++;}
}







